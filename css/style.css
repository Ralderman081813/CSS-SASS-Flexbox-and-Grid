/******************** Reset HTML - Sort of boilerplate ********************/
/* 10px equals 1rem*/
*,
*::before,
*::after {
  box-sizing: inherit;
  margin: 0;
  padding: 0; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box;
  color: #141313;
  font-family: "Lato", Arial, sans-serif;
  font-weight: 400;
  line-height: 1.7;
  padding: 3rem; }

/******************** REUSABLE ********************/
.btn:link,
.btn:visited {
  border-radius: 5rem;
  display: inline-block;
  /* Should use to give an element some height and/or padding. */
  font-size: 1.6rem;
  padding: 1.5rem 4rem;
  position: relative;
  /* Handles the pseudobutton parent element position. */
  text-decoration: none;
  text-transform: uppercase;
  transition: all .2s;
  /* Must be on the inital state, here, to use for :hover/:active */ }

.btn:hover {
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  transform: translateY(-3px); }

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; }

.btn:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  transform: translateY(-1px); }

/* Serves as virtual element after (::after) selected element (.btn) that can be styled 
Here, we add an element that looks like the button, but bigger, then hides - creates the effect. 
Treated as a child of the button. Animation on original state. */
.btn::after {
  border-radius: 5rem;
  content: "";
  /* REQUIRED OR IT WILL NOT APPEAR */
  display: inline-block;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  transition: all .4s;
  width: 100%;
  z-index: -1;
  /* Hides pseudo behind the button. */ }

.btn--white {
  background-color: #fff;
  color: #777; }

.btn--white::after {
  background-color: #fff; }

.btn--animated {
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards;
  /* Automatically apply styles of 0% before animation starts. */ }

/******************** Header ********************/
.header {
  background-image: linear-gradient(rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-position: top;
  background-size: cover;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  height: 95vh;
  position: relative;
  /* Required for the position: absolute in the child element. */ }

.header__logo-box {
  left: 4rem;
  position: absolute;
  /* Parent element, .header, must have position: relative as reference for this. */
  top: 4rem; }

.header__logo {
  height: 3.5rem; }

.header__text-box {
  backface-visibility: hidden;
  /* Prevents "shaking" when animates. */
  left: 50%;
  position: absolute;
  text-align: center;
  top: 40%;
  transform: translate(-50%, -50%);
  /* No longer in relation of the parent element, but of the element itself. */ }

.primary-heading {
  backface-visibility: hidden;
  /* Prevents "shaking" when the heading text animates. */
  color: #fff;
  margin-bottom: 6rem;
  text-transform: uppercase; }

.ph--main {
  animation: moveInLeft 1s ease-out;
  /* animation-name: moveInLeft; /* Name from keyframes animation called moveInLeft. */
  /* animation-delay: 1s; 
    animation-duration: 1s;
    animation-iteration-count: 2; 
    animation-timing-function: ease-out; */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem; }

.ph--sub {
  animation: moveInRight 1s ease-out;
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem; }

/* Handles the animation for the header elements. */
@keyframes moveInLeft {
  /* Before the animation starts = 0% */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* When the animation finishes */
  100% {
    opacity: 1;
    transform: translate(0);
    /* Will appear as default, or as it would with no animation. */ } }

@keyframes moveInRight {
  /* Before the animation starts = 0% */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* When the animation finishes */
  100% {
    opacity: 1;
    transform: translate(0);
    /* Will appear as default, or as it would with no animation. */ } }

@keyframes moveInBottom {
  /* Before the animation starts = 0% */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  /* When the animation finishes */
  100% {
    opacity: 1;
    transform: translate(0);
    /* Will appear as default, or as it would with no animation. */ } }
